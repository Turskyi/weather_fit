//noinspection GrUnresolvedAccess
plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def keyProperties = new Properties()
def keyPropertiesFile = rootProject.file('key.properties')
if (keyPropertiesFile.exists()) {
    keyPropertiesFile.withReader('UTF-8') { reader -> //noinspection GroovyAssignabilityCheck
        keyProperties.load(reader)
    }
}

// Debug environment variables.
def signingKeyDebugPath = keyProperties.getProperty('SIGNING_KEY_DEBUG_PATH') ?: rootProject.SIGNING_KEY_DEBUG_PATH
def signingKeyDebugPassword = keyProperties.getProperty('SIGNING_KEY_DEBUG_PASSWORD') ?: rootProject.SIGNING_KEY_DEBUG_PASSWORD
def signingKeyDebugKey = keyProperties.getProperty('SIGNING_KEY_DEBUG_KEY') ?: rootProject.SIGNING_KEY_DEBUG_KEY
def signingKeyDebugKeyPassword = keyProperties.getProperty('SIGNING_KEY_DEBUG_KEY_PASSWORD') ?: rootProject.SIGNING_KEY_DEBUG_KEY_PASSWORD

// Release environment variables.
def signingKeyReleasePath = keyProperties.getProperty('SIGNING_KEY_RELEASE_PATH') ?: rootProject.SIGNING_KEY_RELEASE_PATH
def signingKeyReleasePassword = keyProperties.getProperty('SIGNING_KEY_RELEASE_PASSWORD') ?: rootProject.SIGNING_KEY_RELEASE_PASSWORD
def signingKeyReleaseKey = keyProperties.getProperty('SIGNING_KEY_RELEASE_KEY') ?: rootProject.SIGNING_KEY_RELEASE_KEY
def signingKeyReleaseKeyPassword = keyProperties.getProperty('SIGNING_KEY_RELEASE_KEY_PASSWORD') ?: rootProject.SIGNING_KEY_RELEASE_KEY_PASSWORD

android {
    namespace = rootProject.application_id
    compileSdk = flutter.compileSdkVersion
    //TODO: replace with "ndkVersion flutter.ndkVersion" when the error "One or more plugins require a higher Android NDK version." is gone.
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    defaultConfig {
        applicationId = rootProject.application_id
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
        }
    }

    signingConfigs {
        production {
            // FCI_BUILD_ID is exported by Codemagic.
            //noinspection GroovyAssignabilityCheck
            if (System.getenv()["FCI_BUILD_ID"] != null) {
                //noinspection GroovyAssignabilityCheck
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                //noinspection GroovyAssignabilityCheck
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                //noinspection GroovyAssignabilityCheck
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                //noinspection GroovyAssignabilityCheck
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                storeFile file(signingKeyReleasePath)
                storePassword signingKeyReleasePassword
                keyAlias signingKeyReleaseKey
                keyPassword signingKeyReleaseKeyPassword
            }
        }

        dev {
            // FCI_BUILD_ID is exported by Codemagic.
            //noinspection GroovyAssignabilityCheck
            if (System.getenv()["FCI_BUILD_ID"] != null) {
                //noinspection GroovyAssignabilityCheck
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                //noinspection GroovyAssignabilityCheck
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                //noinspection GroovyAssignabilityCheck
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                //noinspection GroovyAssignabilityCheck
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                storeFile file(signingKeyDebugPath)
                storePassword signingKeyDebugPassword
                keyAlias signingKeyDebugKey
                keyPassword signingKeyDebugKeyPassword
            }
        }
    }

    buildTypes {
        release {
            // Enabling minification to obfuscate code, shrink APK size, and
            // optimize performance.
            // This helps protect the code from reverse engineering and
            // improves the app's efficiency.
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            signingConfig = signingConfigs.production
        }
        debug {
            signingConfig = signingConfigs.dev
        }
    }

}

flutter {
    source = "../.."
}
